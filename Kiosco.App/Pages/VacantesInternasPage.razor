@page "/VacantesInternas"
@using DPWCMSApp.Services;
@using Kiosco.App.Data
@using Kiosco.App.Services
@inject IVacantesService VacantesService
@inject ISendMailService SendMailService
@inject IJSRuntime jsRunTime;
@inject NavigationManager NavigationManager;
@inject ILocalStorageService _LocalStorageService;

@inject NavigationManager NavigationManager;

@if (@Loading)
{
    <div id="loading">
        <div class="loader">
            <div class="inner one"></div>
            <div class="inner two"></div>
            <div class="inner three"></div>
        </div>
    </div>
}


<div class="card mt-1">
    <div class="card-body p-2 text-center">
        <div class="d-flex flex-row align-items-center">
            <RadzenImage Path="css/imgs/Document.png" Class="rz-border-radius-10 float-start me-3" Style="width: 50px; height: 40px;" />
              <div class="d-flex bd-highlight">
                   <p class="fw-bold mb-0"><i class="fas fa-clock"></i> • Vacantes Internas</p>
              </div>
        </div>      
    </div>
</div>

<img src="css/imgs/image.png" Class="end-text" Style="width: 150px; height: 100px;" />

    <div style="overflow: scroll;">
        <table class="table table-sm table-hover table-bordered mt-1">
            <thead class="bg-blue-cau text-center">
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">TITULO</th>
                    <th scope="col">DESCRIPCION</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (VacantesList.Any())
            {
                @foreach (var item in VacantesList)
                {
                    <tr>
                        <td>@item.VacanteId</td>
                        <th>@item.Title</th>
                        <td>@item.Descripcion</td>
                        <td><RadzenButton Text="APLICAR" Click="@(args => Aplicar(@item.VacanteId, @item.Title))" class="bg bg-blue-cau" /></td>
                    </tr>
                }
            }
            @*            @if (!itemdtos.any() && placeholder == false)
            {
            <tr>
            <th colspan="14">no hay resultados que mostrar</th>
            </tr>
            }*@

            @*            @if (placeholder)
            {
            <tr>
            <th colspan="14">
            <p class="placeholder-glow">
            <span class="placeholder col-12"></span>
            <span class="placeholder col-12 bg-secondary"></span>
            <span class="placeholder col-12"></span>
            <span class="placeholder col-12 bg-secondary"></span>
            </p>
            </th>
            </tr>
            }*@
        </tbody>
    </table>
</div>

    <div class="col-lg-2 p-3">
        <RadzenButton Text="VOLVER" Click="@(args => Volver())" class="bg bg-blue-cau" />
    </div>

<style>
.product-title {
    min-height: 72px;
    background-color: var(--rz-secondary-lighter);
}
.price-badge {
    font-size: 16px;
    font-weight: bold;
    line-height: 20px;
    padding: 8px;
}
</style>

@code {

    private bool Loading;
    static List<Vacantes> VacantesList = new();

    protected override async void OnInitialized()
    {
        Loading = true;
        var result = await VacantesService.GetVacantesAsync();
        VacantesList = result.body.Where(r => r.FechaFin >= DateTime.Now).ToList();
        Loading = false;
        StateHasChanged();
    }


    void Volver()
    {
        NavigationManager.NavigateTo($"/Home");
    }


    async Task Aplicar(int vacanteId, string Title)
    {
        try
        {
            var result = await VacantesService.GetVacantesAplicarAsync();
            if (result.body.Any(r => r.VacanteId == vacanteId))
            {
                await jsRunTime.InvokeVoidAsync("alertForVacantesInternasAdding");
                return;
            }
            Loading = true;
            string carnetId = await _LocalStorageService.GetItem<string>("CarnetCode");
            string CarnetMame = await _LocalStorageService.GetItem<string>("CarnetMame");

            VacantesAplicar vacantesAplicar = new VacantesAplicar()
            {
                EmpId = carnetId,
                VacanteId = vacanteId,
                EmpName = CarnetMame,
            };

            await VacantesService.AddVacantesAsync(vacantesAplicar);

            await SendMailService.SendEmail($"Aprobar la aplicación de vacantes internas:",
             Title, carnetId,
            $"http://192.168.6.227:8089/SignatureSuperPage/{vacanteId}");
            Loading = false;
            await jsRunTime.InvokeVoidAsync("alertForVacantesInternas");
            bool formvalidate = false;
            if (await jsRunTime.InvokeAsync<bool>("alertForValidLogout", formvalidate))
            {
                NavigationManager.NavigateTo($"/#");
            }
        }catch(Exception ex)
        {
            await jsRunTime.InvokeVoidAsync("alertErrorForVacantesInternas");
        }

    }
}
