@page "/NuevosIngresos"
@using Kiosco.App.Data
@using Kiosco.App.Services
@using System.Reflection
@using Kiosco.App.Utils
@inject INuevosIngresosServices NuevosIngresosServices;
@inject NavigationManager NavigationManager;

@*<div class="card mt-1">
    <div class="card-body p-2 text-center">
        <div class="d-flex bd-highlight">
            <p class="fw-bold mb-0"><i class="fas fa-clock"></i> • Nuevos Ingresos</p>
        </div>
    </div>
</div>*@
<div class="card mt-1">
    <div class="card-body p-2 text-center">
        <div class="d-flex flex-row align-items-center">
            <RadzenImage Path="css/imgs/Cargo.png" Class="rz-border-radius-10 float-start me-3" Style="width: 80px; height: 80px;" />
              <div class="d-flex bd-highlight">
                 <p class="fw-bold mb-0"><i class="fas fa-clock"></i> • Nuevos Ingresos</p>
              </div>
 
    </div>
</div>
</div>
      <img src="css/imgs/image.png" Class="end-text" Style="width: 150px; height: 100px;" />


<RadzenDataList PageSize="8" WrapItems="true" AllowPaging="false" Data="@NuevosIngresos" TItem="NuevosIngresos">
                    <Template Context="order">
              <RadzenCard Style="width: 350px;">
                  <div class="row">
                      <div class="col-md-8 text-truncate">
                          <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"Nuevos Ingresos") Class="me-1" IsPill="true" />
                      </div>
                      <div class="col-md-4 text-end">
                          <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.HIRE_DATE)}") IsPill="true" />
                      </div>
                  </div>
                  <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                  <div class="d-flex flex-row align-items-center">
                <RadzenImage Path="@PhotoBase64ImgSrc(order.IMGEMPLEADOS)" Class="rz-border-radius-10 float-start m-5" Style="width: 150px; height: 150px;" />
                      <div>
                          <RadzenText TextStyle="TextStyle.Subtitle1" class="mb-0"><strong>@(order.FIRST_NAME) @(order.LAST_NAME)</strong></RadzenText>
                          <RadzenText TextStyle="TextStyle.Subtitle1" class="mb-0">@(order.POSITION_NAME.Replace(@$""""," "))</RadzenText>
                          @*<RadzenText TextStyle="TextStyle.Body2" class="mb-0">@order.PERSON_NUMBER</RadzenText>*@
                          <RadzenText TextStyle="TextStyle.Caption" class="mb-0">@(order.DEPARTMENT.Replace(@$""""," ").Replace("D - ",""))</RadzenText>
                      </div>
                  </div>
              </RadzenCard>
          </Template>
      </RadzenDataList>

      
      <div class="col-lg-2 p-3">
          <RadzenButton Text="VOLVER" Click="@(args => Volver())" class="bg bg-blue-cau" />
      </div>

@code {
    
    public static List<NuevosIngresos> NuevosIngresos;

    protected override async Task OnInitializedAsync()
    {
        try
        {             
            if(NuevosIngresos == null)
            {
                var files = Directory.GetFiles("//192.168.6.233\\Security\\Internal\\2. GESTIÓN DE PERSONAL\\1. FOTOS\\1. EMPLEADOS 2.0", "*.jpg", SearchOption.AllDirectories);
                NuevosIngresos = (List<NuevosIngresos>)await NuevosIngresosServices.GetNuevosIngresosAsync();
                
                foreach (var nuevoingreso in NuevosIngresos)
                {
                    string imgpath = files.FirstOrDefault(f => f.Contains(nuevoingreso.PERSON_NAME.Replace("CAU", "")));
                    nuevoingreso.IMGEMPLEADOS = string.IsNullOrEmpty(imgpath) ? "css/imgs/UserIconNotFound.png" : imgpath;
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error trying to get Web Response Item Report DTO");
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.InnerException);
        }
        //StateHasChanged();
    }
        
    void Volver()
    {
        NavigationManager.NavigateTo($"/Home");
    }

    public string PhotoBase64ImgSrc(string fileNameandPath)
    {
        if (fileNameandPath.Contains("css/imgs"))
            return fileNameandPath;

        var byteArray = File.ReadAllBytes(fileNameandPath);
        var base64 = Convert.ToBase64String(byteArray);

        return "data:image/png;base64," + base64;
    }
}
